// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: products.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const getAllProducts = `-- name: GetAllProducts :many
SELECT id, name, description, price, brand, sku, stock_quantity, category_id, image_url, thumbnail_url, specifications, variants, is_active, created_at, updated_at FROM products
`

func (q *Queries) GetAllProducts(ctx context.Context) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, getAllProducts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Price,
			&i.Brand,
			&i.Sku,
			&i.StockQuantity,
			&i.CategoryID,
			&i.ImageUrl,
			&i.ThumbnailUrl,
			&i.Specifications,
			&i.Variants,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProduct = `-- name: GetProduct :one
SELECT id, name, description, price, brand, sku, stock_quantity, category_id, image_url, thumbnail_url, specifications, variants, is_active, created_at, updated_at FROM products
WHERE id = $1
`

func (q *Queries) GetProduct(ctx context.Context, id uuid.UUID) (Product, error) {
	row := q.db.QueryRowContext(ctx, getProduct, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Price,
		&i.Brand,
		&i.Sku,
		&i.StockQuantity,
		&i.CategoryID,
		&i.ImageUrl,
		&i.ThumbnailUrl,
		&i.Specifications,
		&i.Variants,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getProductCategories = `-- name: GetProductCategories :many
SELECT id, name, description FROM categories
`

func (q *Queries) GetProductCategories(ctx context.Context) ([]Category, error) {
	rows, err := q.db.QueryContext(ctx, getProductCategories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Category
	for rows.Next() {
		var i Category
		if err := rows.Scan(&i.ID, &i.Name, &i.Description); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProductsByCategory = `-- name: GetProductsByCategory :many
SELECT id, name, description, price, brand, sku, stock_quantity, category_id, image_url, thumbnail_url, specifications, variants, is_active, created_at, updated_at FROM products
WHERE category_id = $1
`

func (q *Queries) GetProductsByCategory(ctx context.Context, categoryID uuid.UUID) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, getProductsByCategory, categoryID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Price,
			&i.Brand,
			&i.Sku,
			&i.StockQuantity,
			&i.CategoryID,
			&i.ImageUrl,
			&i.ThumbnailUrl,
			&i.Specifications,
			&i.Variants,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTotalProducts = `-- name: GetTotalProducts :one
SELECT COUNT(*) FROM products
`

func (q *Queries) GetTotalProducts(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, getTotalProducts)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const listProducts = `-- name: ListProducts :many
SELECT id, name, description, price, brand, sku, stock_quantity, category_id, image_url, thumbnail_url, specifications, variants, is_active, created_at, updated_at FROM products
WHERE (created_at > $1 OR (created_at = $1 AND id > $2))
ORDER BY created_at, id
LIMIT $3
`

type ListProductsParams struct {
	CreatedAt time.Time
	ID        uuid.UUID
	Limit     int32
}

func (q *Queries) ListProducts(ctx context.Context, arg ListProductsParams) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, listProducts, arg.CreatedAt, arg.ID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Price,
			&i.Brand,
			&i.Sku,
			&i.StockQuantity,
			&i.CategoryID,
			&i.ImageUrl,
			&i.ThumbnailUrl,
			&i.Specifications,
			&i.Variants,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const productExists = `-- name: ProductExists :one
SELECT EXISTS (
    SELECT 1 FROM products WHERE id = $1
)
`

func (q *Queries) ProductExists(ctx context.Context, id uuid.UUID) (bool, error) {
	row := q.db.QueryRowContext(ctx, productExists, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const updateStock = `-- name: UpdateStock :exec
UPDATE products
SET stock_quantity = stock_quantity - $2
WHERE id = $1 AND stock_quantity >= $2
`

type UpdateStockParams struct {
	ID            uuid.UUID
	StockQuantity int32
}

func (q *Queries) UpdateStock(ctx context.Context, arg UpdateStockParams) error {
	_, err := q.db.ExecContext(ctx, updateStock, arg.ID, arg.StockQuantity)
	return err
}
