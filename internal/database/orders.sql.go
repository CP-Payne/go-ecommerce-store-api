// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: orders.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createOrder = `-- name: CreateOrder :one
INSERT INTO orders(
    id, user_id, product_total, status, payment_method, shipping_price, created_at, updated_at
) VALUES ( $1, $2, $3, $4, $5, $6, $7, $8)
RETURNING id
`

type CreateOrderParams struct {
	ID            uuid.UUID
	UserID        uuid.UUID
	ProductTotal  string
	Status        string
	PaymentMethod string
	ShippingPrice string
	CreatedAt     time.Time
	UpdatedAt     time.Time
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, createOrder,
		arg.ID,
		arg.UserID,
		arg.ProductTotal,
		arg.Status,
		arg.PaymentMethod,
		arg.ShippingPrice,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const createOrderItem = `-- name: CreateOrderItem :exec
INSERT INTO order_items(
    id, order_id, product_id, quantity, price
) VALUES ( $1, $2, $3, $4, $5)
`

type CreateOrderItemParams struct {
	ID        uuid.UUID
	OrderID   uuid.UUID
	ProductID uuid.UUID
	Quantity  int32
	Price     string
}

func (q *Queries) CreateOrderItem(ctx context.Context, arg CreateOrderItemParams) error {
	_, err := q.db.ExecContext(ctx, createOrderItem,
		arg.ID,
		arg.OrderID,
		arg.ProductID,
		arg.Quantity,
		arg.Price,
	)
	return err
}
