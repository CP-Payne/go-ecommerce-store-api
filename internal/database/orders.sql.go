// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: orders.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createOrder = `-- name: CreateOrder :one
INSERT INTO orders(
    id, user_id, product_total,order_total, status, payment_method, shipping_price, cart_id, created_at, updated_at
) VALUES ( $1, $2, $3, $4, $5, $6, $7, $8, $9, $10)
RETURNING id
`

type CreateOrderParams struct {
	ID            uuid.UUID
	UserID        uuid.UUID
	ProductTotal  string
	OrderTotal    string
	Status        string
	PaymentMethod string
	ShippingPrice string
	CartID        uuid.NullUUID
	CreatedAt     time.Time
	UpdatedAt     time.Time
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, createOrder,
		arg.ID,
		arg.UserID,
		arg.ProductTotal,
		arg.OrderTotal,
		arg.Status,
		arg.PaymentMethod,
		arg.ShippingPrice,
		arg.CartID,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const createOrderItem = `-- name: CreateOrderItem :exec
INSERT INTO order_items(
    id, order_id, product_id, quantity, price
) VALUES ( $1, $2, $3, $4, $5)
`

type CreateOrderItemParams struct {
	ID        uuid.UUID
	OrderID   uuid.UUID
	ProductID uuid.UUID
	Quantity  int32
	Price     string
}

func (q *Queries) CreateOrderItem(ctx context.Context, arg CreateOrderItemParams) error {
	_, err := q.db.ExecContext(ctx, createOrderItem,
		arg.ID,
		arg.OrderID,
		arg.ProductID,
		arg.Quantity,
		arg.Price,
	)
	return err
}

const getOrderByID = `-- name: GetOrderByID :one
SELECT id, user_id, processor_order_id, product_total, status, order_total, payment_method, payment_email, payer_id, shipping_price, cart_id, created_at, updated_at FROM orders
WHERE id = $1
`

func (q *Queries) GetOrderByID(ctx context.Context, id uuid.UUID) (Order, error) {
	row := q.db.QueryRowContext(ctx, getOrderByID, id)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ProcessorOrderID,
		&i.ProductTotal,
		&i.Status,
		&i.OrderTotal,
		&i.PaymentMethod,
		&i.PaymentEmail,
		&i.PayerID,
		&i.ShippingPrice,
		&i.CartID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getOrderByProcessorOrderID = `-- name: GetOrderByProcessorOrderID :one
SELECT id, user_id, processor_order_id, product_total, status, order_total, payment_method, payment_email, payer_id, shipping_price, cart_id, created_at, updated_at FROM orders
WHERE processor_order_id = $1
`

func (q *Queries) GetOrderByProcessorOrderID(ctx context.Context, processorOrderID sql.NullString) (Order, error) {
	row := q.db.QueryRowContext(ctx, getOrderByProcessorOrderID, processorOrderID)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ProcessorOrderID,
		&i.ProductTotal,
		&i.Status,
		&i.OrderTotal,
		&i.PaymentMethod,
		&i.PaymentEmail,
		&i.PayerID,
		&i.ShippingPrice,
		&i.CartID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getOrderItemsByOrderID = `-- name: GetOrderItemsByOrderID :many
SELECT oi.quantity, p.price, p.name, oi.product_id
FROM order_items oi
JOIN products p ON oi.product_id = p.id
WHERE oi.order_id = $1
`

type GetOrderItemsByOrderIDRow struct {
	Quantity  int32
	Price     string
	Name      string
	ProductID uuid.UUID
}

func (q *Queries) GetOrderItemsByOrderID(ctx context.Context, orderID uuid.UUID) ([]GetOrderItemsByOrderIDRow, error) {
	rows, err := q.db.QueryContext(ctx, getOrderItemsByOrderID, orderID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetOrderItemsByOrderIDRow
	for rows.Next() {
		var i GetOrderItemsByOrderIDRow
		if err := rows.Scan(
			&i.Quantity,
			&i.Price,
			&i.Name,
			&i.ProductID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserOrderIDs = `-- name: GetUserOrderIDs :many
SELECT id
FROM orders
WHERE user_id = $1 AND status = 'COMPLETED'
`

func (q *Queries) GetUserOrderIDs(ctx context.Context, userID uuid.UUID) ([]uuid.UUID, error) {
	rows, err := q.db.QueryContext(ctx, getUserOrderIDs, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []uuid.UUID
	for rows.Next() {
		var id uuid.UUID
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setOrderCompleted = `-- name: SetOrderCompleted :exec
UPDATE orders
    SET  status=$1, payment_email=$2, payer_id=$3, updated_at=$4
    WHERE processor_order_id=$5
`

type SetOrderCompletedParams struct {
	Status           string
	PaymentEmail     sql.NullString
	PayerID          sql.NullString
	UpdatedAt        time.Time
	ProcessorOrderID sql.NullString
}

func (q *Queries) SetOrderCompleted(ctx context.Context, arg SetOrderCompletedParams) error {
	_, err := q.db.ExecContext(ctx, setOrderCompleted,
		arg.Status,
		arg.PaymentEmail,
		arg.PayerID,
		arg.UpdatedAt,
		arg.ProcessorOrderID,
	)
	return err
}

const setProcessorIDAndStatus = `-- name: SetProcessorIDAndStatus :exec
UPDATE orders
    SET processor_order_id = $1, status=$2, updated_at=$3
    WHERE id=$4
`

type SetProcessorIDAndStatusParams struct {
	ProcessorOrderID sql.NullString
	Status           string
	UpdatedAt        time.Time
	ID               uuid.UUID
}

func (q *Queries) SetProcessorIDAndStatus(ctx context.Context, arg SetProcessorIDAndStatusParams) error {
	_, err := q.db.ExecContext(ctx, setProcessorIDAndStatus,
		arg.ProcessorOrderID,
		arg.Status,
		arg.UpdatedAt,
		arg.ID,
	)
	return err
}
