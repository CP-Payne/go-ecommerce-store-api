// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: reviews.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const hasUserReviewedProduct = `-- name: HasUserReviewedProduct :one
SELECT EXISTS (
    SELECT 1 FROM reviews WHERE user_id = $1 AND product_id = $2
)
`

type HasUserReviewedProductParams struct {
	UserID    uuid.UUID
	ProductID uuid.UUID
}

func (q *Queries) HasUserReviewedProduct(ctx context.Context, arg HasUserReviewedProductParams) (bool, error) {
	row := q.db.QueryRowContext(ctx, hasUserReviewedProduct, arg.UserID, arg.ProductID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const insertReview = `-- name: InsertReview :one
INSERT INTO reviews (
    id, title, review_text, rating, product_id, user_id, deleted, created_at, updated_at
) VALUES ( $1, $2, $3, $4, $5, $6, $7, $8, $9)
RETURNING id, title, review_text, rating, product_id, user_id, deleted, created_at, updated_at
`

type InsertReviewParams struct {
	ID         uuid.UUID
	Title      sql.NullString
	ReviewText sql.NullString
	Rating     int32
	ProductID  uuid.UUID
	UserID     uuid.UUID
	Deleted    bool
	CreatedAt  time.Time
	UpdatedAt  time.Time
}

func (q *Queries) InsertReview(ctx context.Context, arg InsertReviewParams) (Review, error) {
	row := q.db.QueryRowContext(ctx, insertReview,
		arg.ID,
		arg.Title,
		arg.ReviewText,
		arg.Rating,
		arg.ProductID,
		arg.UserID,
		arg.Deleted,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Review
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.ReviewText,
		&i.Rating,
		&i.ProductID,
		&i.UserID,
		&i.Deleted,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
